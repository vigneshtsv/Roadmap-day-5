var (vs) let (vs) const:-

Hoisting & scoping:- 
  =>developer mistake
  =>it we print a varable without decalration it leads to hoisting.
  =>in var it will print undefined.
  =>in let and const it will throw an error.
  =>let and const are block variables.
  =>var is global variable.
  --  - - - - - -- - - - - - - - - - - -
example of hoisting=>
   console.log(a);
   var/let/const a =2;
- - - - - - - - - - - - - - - - - - - - -

example for scoping=>
    const a = 1;
function test(){
    const b = 2;
    console.log("block",a,b)
}
test();
console.log("global",a,b);
- - - - - - - - - - - - - - - - - - - -- - 
destructuring 


//Object destructuring
 const obj = {
  name:"john",
  age: 30,
  address:{
    city:"chennai"
    state: "tamilnadu"
  }
 }
   //without destructuring
    console.log(obj.name);
    console.log(obj.address.city)

//!with destructuring
     //const {key} = objectname;

    //  const {names,age} = obj;
    //  console.log(names);
    //  console.log(age);
     
    //!Nested object destructuring

    // const {names,age,address:{city}} = obj
    // console.log(names);
    // console.log(age);
    // console.log(city);

  //! Array of objects destructuring
   
//  const groceryshop = [
//     {item:"apple",price:25, categary:"fruits"},
//     {item:"salt",price: 10, categary:"misc"},
//     {item:"tomato",price: 120, categary:"vegetables"}
//  ] 
 //!without destructuring
//  console.log(groceryshop);
//  console.log(groceryshop[0].item);

 //!with destructuring
//  const [{item,price,categary}]= groceryshop
//  console.log(item)
//  console.log(price);
//  console.log(categary);

//!Array and objects destructuring
// const person = {
//     names: "john",
//     location:["chennai","madurai","paramakudi"]
// }

// const {location:[main,sub1,sub2]}= person;
// console.log(main);
// console.log(sub1);
// console.log(sub2);
// console.log(person.location);

//!normal way to create object
// const order = {
//     id: 1000,
//     pizza:"formhouse" 
// }
// console.log(order)
    //! using shorthand property
    // const id = 1000;
    // const pizza = "farmhouse";
    // const order = {
    //     id,
    //     pizza
    // }
    // console.log(order);
//!Template lterals:-
//   backtick(`) use pani <br> tage ilama line ya break panalam print panrathu aprm $ simple use pani variable ya call panikkalam ex:- (`type string ${a}`)
  // var a = 10;
  // var b = 20;
  // var c = 30;
  // console.log(`the value of a is ${a}
  // the value of b is ${b}
  // the value of c is ${c}`);
//!spread & rest operators:-
  //!spread operators
      //converts a string into character array
      /*ex1:
      const arr = ["guvi"];
      console.log(...arr);*/
      //ex2
      // const arr1 = ["bob","john","doe"]
      // const arr2 = ["elisa","satya","leo"]
      // const arr3 = [...arr1,...arr2]
      // console.log(arr3);
   //! Rest parameter:-
      //it is used inside the function to consider the remaining values.
      
      function test(a,b,...rest){
        let sum =0;
        for(let i=0;i<rest.length;i=i+1){
          sum = sum+rest[i];
        }
        return sum;
      }
      console.log(test(12,13,14,15,16,17));
    
      